<ruleset name="Custom Rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
    <description>A dedicated ruleset for backend projects</description>

    <rule ref="https://raw.githubusercontent.com/libon/backend-code-rulesets/main/pmd/rulesets/arch4u-ruleset-tweaked.xml">
        <exclude name="AvoidFieldNameMatchingMethodName"/>
        <!-- Too many false positive, as rule doesn't take object creation with interator derived objects into consideration-->
        <exclude name="AvoidInstantiatingObjectsInLoops"/>
        <exclude name="ClassNamingConventions"/>
        <exclude name="CloseResource"/>
        <exclude name="CommentDefaultAccessModifier"/>
        <exclude name="CommentRequired"/>
        <exclude name="ConstructorCallsOverridableMethod"/>
        <exclude name="CyclomaticComplexity"/>
        <exclude name="DataClass"/>
        <exclude name="DoNotUseThreads"/>
        <exclude name="EmptyCatchBlock"/>
        <exclude name="ExcessiveParameterList"/>
        <exclude name="GenericsNaming"/>
        <exclude name="LocalVariableCouldBeFinal"/>
        <exclude name="LongVariable"/>
        <exclude name="LooseCoupling"/>
        <exclude name="MethodArgumentCouldBeFinal"/>
        <exclude name="MethodNamingConventions"/>
        <exclude name="NonSerializableClass"/>
        <exclude name="NullAssignment"/>
        <exclude name="PrematureDeclaration"/>
        <exclude name="ShortMethodName"/>
        <exclude name="ShortVariable"/>
        <exclude name="TestClassWithoutTestCases"/>
        <exclude name="TooManyMethods"/>
        <exclude name="TooManyStaticImports"/>
        <exclude name="UncommentedEmptyConstructor"/>
        <!-- false positive on cast in lambda to enable back when https://github.com/pmd/pmd/issues/5073 is fixed -->
        <exclude name="UnnecessaryCast"/>
        <exclude name="UnnecessaryFullyQualifiedName"/>
        <exclude name="UnitTestAssertionsShouldIncludeMessage"/>
        <exclude name="UnitTestContainsTooManyAsserts"/>

        <exclude name="UnusedPrivateMethod"/>
        <exclude name="UseExplicitTypes"/>
        <exclude name="UseLocaleWithCaseConversions"/>
        <exclude name="UseUnderscoresInNumericLiterals"/>
    </rule>

    <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod">
        <properties>
            <property name="ignoredAnnotations" value="java.lang.Deprecated,jakarta.validation.constraints.AssertTrue"/>
            <property name="violationSuppressXPath"
                      value="//ClassDeclaration//Annotation/ClassType[@SimpleName='PostConstruct']"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/ClassNamingConventions">
        <!--tweak to include test classes that ends with IT-->
        <properties>
            <property name="classPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="abstractClassPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="interfacePattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="enumPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="annotationPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="utilityClassPattern" value="[A-Z][a-zA-Z0-9]*"/>
            <property name="testClassPattern" value="^[A-Z][a-zA-Z0-9_]+(Test|IT)(s|Case)?$"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/MethodNamingConventions">
        <!--tweak to include test methods that uses snake_case -->
        <properties>
            <property name="methodPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="staticPattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="nativePattern" value="[a-z][a-zA-Z0-9]*"/>
            <property name="junit3TestPattern" value="test[A-Z0-9][a-zA-Z0-9]*"/>
            <property name="junit4TestPattern"
                      value="^(([a-z0-9]+(?:_[a-zA-Z0-9]+)*)|([a-z]+(?:[A-Z0-9]+[a-z0-9]+[A-Za-z0-9]*)*))$"/>
            <property name="junit5TestPattern"
                      value="^(([a-z0-9]+(?:_[a-zA-Z0-9]+)*)|([a-z]+(?:[A-Z0-9]+[a-z0-9]+[A-Za-z0-9]*)*))$"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/ShortMethodName">
        <!-- tweak to ignore some valid short method names -->
        <properties>
            <property name="violationSuppressXPath"
                      value="//MethodDeclaration[matches(@Name, 'id')]"/>
        </properties>
    </rule>

    <rule ref="category/java/codestyle.xml/ShortVariable">
        <!-- tweak to ignore some valid short variable names -->
        <properties>
            <property name="violationSuppressRegex"
                      value="(?i)Avoid variables with short names like (id|ids|os|OK)"/>
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/UnnecessaryFullyQualifiedName">
        <!-- remove short methods name from rule violation -->
        <properties>
            <property name="violationSuppressXPath"
                      value="//ExpressionStatement/MethodCall[ (3 > string-length(@MethodName))]"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/DataClass">
        <!-- remove entities and utility class from rule -->
        <properties>
            <property name="violationSuppressXPath"
                      value="//ClassDeclaration/ModifierList/Annotation[@SimpleName='Entity']
                             | //ClassDeclaration/ModifierList/Annotation[@SimpleName='UtilityClass']"/>
        </properties>
    </rule>
    <rule ref="category/java/design.xml/CyclomaticComplexity">
        <priority>5</priority>
        <properties>
            <property name="methodReportLevel" value="20"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/ExcessiveParameterList">
        <!-- exclude constructors from rule -->
        <properties>
            <property name="violationSuppressXPath"
                      value="//ConstructorDeclaration | //MethodDeclaration/ModifierList/Annotation/ClassType[@SimpleName = 'Override']"/>
        </properties>
    </rule>
    <rule ref="category/java/documentation.xml/UncommentedEmptyConstructor">
        <properties>
            <!-- ignore empty constructor on model classes as it is needed for Jackson
            and on entity classes as it is needed for hibernate-->
            <property name="violationSuppressXPath"
                      value="//ClassDeclaration[matches(@SimpleName,'^[A-Z].*(Entity|Model)$')]"/>
        </properties>
    </rule>

    <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingMethodName">
        <properties>
            <!--Ignore AvoidFieldNameMatchingMethodName on Builders and Test Classes -->
            <!-- Only match other classes when there are getter or setter-->
            <property name="violationSuppressXPath"
                      value="//ClassDeclaration[matches(@SimpleName,'^.*Builder$|^[A-Z][a-zA-Z0-9]+(Test|IT)(s|Case)?$')]
                            | (//ClassDeclaration/ClassBody|//EnumDeclaration/EnumBody)[
                              count(MethodDeclaration[
                                        starts-with(@Name,'get')
                                        or starts-with(@Name,'set')
                              ]) = 0
                           ]"/>
        </properties>
    </rule>
    <rule ref="category/java/errorprone.xml/CloseResource">
        <properties>
            <!--Ignore CloseResource on Test Classes-->
            <property name="violationSuppressXPath"
                      value="//ClassDeclaration[matches(@SimpleName,'^[A-Z][a-zA-Z0-9_]+(Test|IT)(s|Case)?$')]"/>
        </properties>
    </rule>
    <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod">
        <properties>
            <!--Ignore Rule when suppress warning is set or if class extends, or on entities (due to hibernate exception) -->
            <property name="violationSuppressXPath"
                      value="//ConstructorDeclaration/ModifierList/Annotation[@SimpleName ='SuppressWarnings']/AnnotationMemberList/MemberValuePair/StringLiteral[contains(@Image,'this-escape')]
                             | //ClassDeclaration/ExtendsList//ClassType[@SimpleName = 'ResourceConfig']
                             | //ClassDeclaration/ModifierList/Annotation[@SimpleName='Entity']"/>
        </properties>
    </rule>
    <rule ref="category/java/errorprone.xml/EmptyCatchBlock">
        <properties>
            <property name="allowCommentedBlocks" value="true"/>
            <property name="allowExceptionNameRegex" value="^(ignored|expected)$"/>
        </properties>
    </rule>

    <rule ref="category/java/errorprone.xml/TestClassWithoutTestCases">
        <properties>
            <property name="testClassPattern" value="^[A-Z][a-zA-Z0-9_]+(Test|IT)(s|Case)?$"/>
        </properties>
    </rule>

    <rule name="TooManyMethods"
          language="java"
          since="4.2"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule"
          message="This class has too many methods, consider refactoring it."
          externalInfoUrl="${pmd.website.baseurl}/pmd_rules_java_design.html#toomanymethods">
        <!--tweak to exclude test methods that start with should or ends with Test -->
        <description>
            A class with too many methods is probably a good suspect for refactoring, in order to reduce its
            complexity and find a way to have more fine-grained objects.
        </description>
        <priority>3</priority>
        <properties>
            <property name="maxmethods" type="Integer" description="The method count reporting threshold" min="1"
                      max="1000" value="20"/>
            <property name="xpath">
                <value>
                    <![CDATA[
 //ClassDeclaration/ClassBody
     [
      count(MethodDeclaration[
         not (
                starts-with(@Name,'get')
                or starts-with(@Name,'set')
                or starts-with(@Name,'is')
                or starts-with(@Name,'should')
                or ends-with(@Name,'Test')
            )
      ]) > $maxmethods
   ]
]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule ref="category/java/multithreading.xml/DoNotUseThreads">
        <properties>
            <!--Ignore AvoidHardcodedConnectionConfig on classes where the class name ends with IT or Test-->
            <property name="violationSuppressXPath"
                      value="//ClassDeclaration[matches(@SimpleName,'^[A-Z][a-zA-Z0-9_]+(Test|IT)(s|Case)?$')]"/>
        </properties>
    </rule>
    <rule ref="category/java/performance.xml/TooFewBranchesForSwitch">
        <properties>
            <property name="minimumNumberCaseForASwitch" value="2"/>
        </properties>
    </rule>

    <rule name="AvoidJpaRepositoryInRepositoryInterface"
          language="java"
          message="Interfaces annotated with `@Repository` should extend LibonJpaRepository instead of JpaRepository."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Detects interfaces annotated with `@Repository` that extend JpaRepository, advising the use of
            LibonJpaRepository.
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                //ClassDeclaration[@Interface=true()]
                                    [.//Annotation[@SimpleName='Repository']]
                                    [.//ExtendsList/ClassType[@SimpleName='JpaRepository']]
                ]]>
                </value>
            </property>
        </properties>
    </rule>
    <rule name="AvoidTransactionalOnClassLevel"
          language="java"
          message="We should not use `@Transactional` on class level, use it on method level instead."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Detects classes annotated with `@Transactional`, advising the use of method level annotation because we tend
            to forget when it's annotated on class.
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                    <![CDATA[
                //ClassDeclaration/ModifierList/Annotation[@SimpleName='Transactional']
                ]]>
                </value>
            </property>
        </properties>
    </rule>
</ruleset>
